class TrieNode {
    
    TrieNode[] children = new TrieNode[26];
    
    boolean isEndofWord = false;
    TrieNode() {
        
        for(int i=0;i<26;i++) {
            
            children[i] = null;
        }
    }
}
class Solution {
    
    TrieNode root = new TrieNode();
    
    public List<String> findWords(char[][] board, String[] words) {
        
        HashSet<String> result = new HashSet<>();
        for(String s : words) {
            
            insert(s);
        }
        
        for(int i=0;i<board.length;i++) {
            for(int j=0;j<board[0].length;j++) {
                
                
                DFS(i,j,board,result, root,"");
            }
        }
        
        return new ArrayList<String>(result);
        
    }
    
    public void DFS(int i, int j, char[][] board,HashSet<String> result,TrieNode crawl,String r) {
        
        if(i<0 || j<0 || i>=board.length || j>= board[0].length || board[i][j] - 'a' > 25 ||crawl.children[board[i][j] -'a']  == null)
            return;
        
         r += board[i][j];
           
        crawl =  crawl.children[board[i][j] -'a'];
        if(crawl.isEndofWord) {
              if(!result.contains(r))
                result.add(r);
        }

       board[i][j] ^=256;
            
        DFS(i+1,j,board,result,crawl,r);
        DFS(i-1,j,board,result,crawl,r);
        DFS(i,j+1,board,result,crawl,r);
        DFS(i,j-1,board,result,crawl,r);
        
        board[i][j] ^=256;
            
    }
    
    public void insert(String s) {
        
        TrieNode crawl = root;
        
        for(int i=0;i<s.length();i++) {
            
            int ind = s.charAt(i) - 'a';
            
            if(crawl.children[ind] == null){
                
                crawl.children[ind] = new TrieNode();
            }
            crawl = crawl.children[ind];
        }
        crawl.isEndofWord = true;
    }
}
