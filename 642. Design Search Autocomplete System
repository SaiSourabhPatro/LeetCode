class TrieNode {
    
    TrieNode[] child = new TrieNode[33];
 
    HashMap<String,Integer> kc;
    
    public TrieNode() {
        
        for(int i=0;i<33;i++) {
            
            child[i] = null;
             kc = new HashMap<>();
        }
        
    }
    
    
}
class AutocompleteSystem {
    
    TrieNode root;
    StringBuilder sb;
   
    public AutocompleteSystem(String[] sentences, int[] times) {
        
        root = new TrieNode();
        sb = new StringBuilder();
        
        for(int i=0;i<sentences.length;i++) {

            insert(root, sentences[i], times[i]);
            
        }
    }
    
    public List<String> input(char c) {
        
        if(c == '#') {
            
            insert(root, sb.toString(), 1);
            sb = new StringBuilder();
            return new ArrayList<String>();
        }
        sb.append(c);
        
        return search(root, sb.toString());
    }
    
    public List<String> search(TrieNode root, String s) {
        
        TrieNode crawl = root;
        List<String> op = new ArrayList<String>();
        for(int i=0;i<s.length();i++) {
            int c = 32;
            if(s.charAt(i) != ' ')
                c = s.charAt(i) - 'a';
            if(crawl.child[c] == null)
                return op;
            
            crawl = crawl.child[c];
            
        }
        
         PriorityQueue<Pair<String,Integer>>  pq = new PriorityQueue<>((a,b) -> a.getValue() != b.getValue() ? a.getValue() - b.getValue() : b.getKey().compareTo(a.getKey()));
       
        
        for(String sx : crawl.kc.keySet()) {
            
            pq.add(new Pair(sx,crawl.kc.get(sx)));
            if(pq.size() > 3)
                pq.poll();
        }
        
        while(!pq.isEmpty()) {
            op.add(0,pq.poll().getKey());
        }
        
        return op;
        
    }
    public void insert(TrieNode root, String sentence, int times) {
        
        TrieNode crawl = root;
        
        for(int i=0;i<sentence.length();i++) {
            
            int c = 32;
            if(sentence.charAt(i) != ' ')
                c = sentence.charAt(i) - 'a';
            
            if(crawl.child[c] == null) {
                
                crawl.child[c] = new TrieNode();
                
            }
            
            crawl = crawl.child[c];
            
            crawl.kc.put(sentence, crawl.kc.getOrDefault(sentence,0)+times);
            
        }
       
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */
