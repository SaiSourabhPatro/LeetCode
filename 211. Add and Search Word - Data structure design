class TrieNode {
    
    boolean isEndOfWord;
    TrieNode[] children = new TrieNode[26];
    
    public TrieNode() {
        
        isEndOfWord = false;
        for(int i=0;i<26;i++) {
            
            children[i] = null;
        }
    }
}

class WordDictionary {

    /** Initialize your data structure here. */
    
    TrieNode root;
    public WordDictionary() {
        
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        
        TrieNode crawl = root;
        
        for(int i=0;i<word.length();i++) {
            
            int c = word.charAt(i) - 'a';
            
            if(crawl.children[c] == null) {
                crawl.children[c] = new TrieNode();
            }
            crawl = crawl.children[c];
            
        }
        crawl.isEndOfWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        
        return backtrack(word, root);
        
    }
    
    public boolean backtrack(String word, TrieNode crawl) {
        
        if(word.length() == 0)
            return crawl.isEndOfWord;
        
        for(int i=0; i<word.length();i++) {
            
            char c = word.charAt(i);
            
            if(c == '.') {
                
                for(int j=0;j<26;j++) {
                    
                    if(crawl.children[j] != null) {
                        
                        if(backtrack(word.substring(i+1), crawl.children[j]))
                            return true;
                    }  
                }
                return false;
                
            } else {
                
                    int ind = c - 'a';
                    if(crawl.children[ind] == null)
                        return false;
                    crawl = crawl.children[ind];
                
            }
        }
        return crawl!=null && crawl.isEndOfWord;
        
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
